package com.example.john.norfolktouring.TourLocationListFragment;

import android.app.Fragment;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.location.Location;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.AsyncTaskLoader;
import android.support.v4.content.Loader;
import android.support.v7.preference.PreferenceManager;
import android.support.v7.widget.DividerItemDecoration;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.example.john.norfolktouring.Data.TourLocationCursorAdapter;
import com.example.john.norfolktouring.MainActivity;
import com.example.john.norfolktouring.NorfolkTouring;
import com.example.john.norfolktouring.R;
import com.example.john.norfolktouring.TourLocation;
import com.example.john.norfolktouring.Utils.InfoByIdsTask;
import com.example.john.norfolktouring.Utils.PlacesUtils;

import java.util.ArrayList;

import static com.example.john.norfolktouring.Constants.SAVED_STATE;
import static com.example.john.norfolktouring.Data.TourLocationContract.TourLocationEntry;
import static com.example.john.norfolktouring.NorfolkTouring.setActionBarTitle;

/**
 * Created by John on 7/3/2017.
 */

/**
 * A general formulation of a Fragment that displays `TourLocation` objects.
 */
public abstract class TourLocationListFragment extends Fragment
        implements InfoByIdsTask.InfoByIdResultCallback,
        SharedPreferences.OnSharedPreferenceChangeListener,
        LoaderManager.LoaderCallbacks<Cursor> {
    /*** Member Variables ***/
    protected MainActivity mActivity;
    private TourLocationCursorAdapter mAdapter;
    // Used to save and restore instance state.
    // Primarily used to save state when the fragment is put on the back stack.
    protected Bundle savedState;

    // Constants
    // Strings for storing state information.
    private static final String LOCATIONS = "mLocations";

    private static final String LOG_TAG = TourLocationListFragment.class.getCanonicalName();
    public static final String FRAGMENT_LABEL = "list";
    // Identifies the `AsyncTaskLoader` for `TourLocation`s.
    private static final int TASK_LOADER_ID = 0;
    // This should always be a category label from strings.xml.
    static String CURRENT_CATEGORY_LABEL = "";

    /*** Methods ***/
    /**
     * Loader Callbacks
     */

    /**
     * Instantiates and returns a new AsyncTaskLoader with the given ID.
     * This loader will return tour location data as a Cursor or null if an error occurs.
     * <p>
     * Implements the required callbacks to take care of loading data at all stages of loading.
     */
    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        return new AsyncTaskLoader<Cursor>(NorfolkTouring.getContext()) {
            // Initialize a Cursor, this will hold all the tour location data
            Cursor mTourLocationData = null;

            @Override
            protected void onStartLoading() {
                if (mTourLocationData != null) {
                    // Delivers any previously loaded data immediately
                    deliverResult(mTourLocationData);
                } else {
                    // Force a new load
                    forceLoad();
                }
            }

            @Override
            public Cursor loadInBackground() {
                // Query and load all tour location data in the background.
                try {
                    Uri uri = TourLocationEntry.CONTENT_URI;
                    return NorfolkTouring.getContext().getContentResolver().query(uri,
                            null, null, new String[]{CURRENT_CATEGORY_LABEL}, null);
                } catch (Exception e) {
                    Log.e(LOG_TAG, "Failed to asynchronously load tour location cursor data.");
                    e.printStackTrace();
                    return null;
                }
            }

            @Override
            public void deliverResult(Cursor data) {
                mTourLocationData = data;
                super.deliverResult(data);
            }
        };
    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        ArrayList<TourLocation> adapterTourLocations = mAdapter.getTourLocations();
        ArrayList<TourLocation> cursorTourLocations = null;
        if (data != null)
            cursorTourLocations = TourLocationCursorAdapter.getTourLocationsFromDatabaseData(data);
        // If the data is identical, do not update the adapter's cursor.
        if ((adapterTourLocations != null && data != null) &&
                adapterTourLocations.equals(cursorTourLocations)) {
            return;
        } else {
            mAdapter.swapCursor(data);
        }
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.
     * onLoaderReset removes any references this activity had to the loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        mAdapter.swapCursor(null);
    }

    /**
     * Shared Preferences
     **/

    /**
     * Called when the shared preferences change.
     */
    @Override
    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
        if (key.equals(getString(R.string.pref_enable_wifi_cell_data_usage_key))) {
            if (this == mActivity.getCurrentFragment()) {
                mAdapter.notifyDataSetChanged();
                boolean wifiCellEnabled = sharedPreferences.getBoolean(key,
                        getResources().getBoolean(R.bool.pref_enable_wifi_cell_data_usage_default));
                if (wifiCellEnabled)
                    PlacesUtils.getInfoForTourLocationsIfNeeded(mActivity, mAdapter.getTourLocations());
            }
        }
    }

    /**
     * Lifecycle Methods
     **/

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        mActivity = (MainActivity) getActivity();

        // Register this Fragment as a listener for shared preference changes.
        SharedPreferences sharedPreferences =
                PreferenceManager.getDefaultSharedPreferences(mActivity);
        sharedPreferences.registerOnSharedPreferenceChangeListener(this);

        // Set the Action Bar title to the name of this category.
        setActionBarTitle(mActivity, CURRENT_CATEGORY_LABEL);

        // Record that this Fragment is the currently displayed one in `MainActivity`.
        mActivity.setCurrentFragment(this);

        View rootView = inflater.inflate(R.layout.location_list, container, false);

        // If the state was saved normally (e.g. activity was paused), restore normally.
        // Otherwise (likely now being restored from the back stack), restore from `savedState`.
        if (savedInstanceState != null && savedState == null) {
            savedState = savedInstanceState.getBundle(SAVED_STATE);
        }
        if (savedState != null) {
            ArrayList<TourLocation> tourLocations = savedState.getParcelableArrayList(LOCATIONS);
            // Create an adapter for the locations.
            mAdapter = new TourLocationCursorAdapter((MainActivity) getActivity(),
                    mActivity.getCurrentLocation(), CURRENT_CATEGORY_LABEL, tourLocations);
        } else {
            mAdapter = new TourLocationCursorAdapter((MainActivity) getActivity(),
                    mActivity.getCurrentLocation(), CURRENT_CATEGORY_LABEL, null);
        }
        savedState = null;

        RecyclerView recyclerView = (RecyclerView) rootView.findViewById(R.id.location_list);
        recyclerView.setAdapter(mAdapter);
        // Add a divider between items (like `ListView` default).
        LinearLayoutManager recyclerViewLayoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
        DividerItemDecoration dividerItemDecoration =
                new DividerItemDecoration(recyclerView.getContext(),
                        recyclerViewLayoutManager.getOrientation());
        recyclerView.addItemDecoration(dividerItemDecoration);

        return rootView;
    }

    @Override
    public void onResume() {
        super.onResume();
        mActivity.getSupportLoaderManager().initLoader(TASK_LOADER_ID, null, this);
    }

    protected Bundle saveState() {
        Bundle state = new Bundle();
        state.putParcelableArrayList(LOCATIONS, mAdapter.getTourLocations());
        return state;
    }

    @Override
    public void onSaveInstanceState(Bundle savedInstanceState) {
        super.onSaveInstanceState(savedInstanceState);
        savedInstanceState.putBundle(SAVED_STATE, (savedState != null) ? savedState : saveState());
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        mActivity.getSupportLoaderManager().destroyLoader(TASK_LOADER_ID);
        // Accommodates this fragment being added to the back stack.
        savedState = saveState();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        PreferenceManager.getDefaultSharedPreferences(mActivity)
                .unregisterOnSharedPreferenceChangeListener(this);
    }

    /**
     * Location Updates Methods
     **/

    public void locationCallback(Location location) {
        // Update the list items with the current distance to them.
        mAdapter.updateLocation(location);
    }

    /**
     * Callback for `InfoByIdsTask`.
     */
    @Override
    public void infoByIdResultCallback() {
        mAdapter.notifyDataSetChanged();
    }
}
